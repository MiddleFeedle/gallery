{"ast":null,"code":"const DB_NAME = 'PictureStoring';\nconst OBJECT_STORE_NAME = 'objectStore';\n/* ... */\n\nexport default class IndexedDbRepository {\n  /* ... */\n  constructor(keyPath) {\n    this.error = null;\n    this.keyPath = keyPath; // конструктор нельзя объявить как async\n    // поэтому вынесено в отдельную функцию\n\n    this.openDatabasePromise = this._openDatabase();\n  }\n\n  async _openDatabase(keyPath) {\n    try {\n      this.dbConnection = await openDatabasePromise(keyPath);\n    } catch (error) {\n      this.error = error;\n      throw error;\n    }\n  }\n\n  async _tx(txMode, callback) {\n    await this.openDatabasePromise; // await db connection\n\n    const transaction = this.dbConnection.transaction([OBJECT_STORE_NAME], txMode);\n    const objectStore = transaction.objectStore(OBJECT_STORE_NAME);\n    return await callback(objectStore);\n  }\n\n  async findAll() {\n    return this._tx('readonly', objectStore => getAllPromise(objectStore));\n  }\n\n  async findById(key) {\n    return this._tx('readonly', objectStore => getPromise(objectStore, key));\n  }\n\n  async deleteById(key) {\n    return this._tx('readwrite', objectStore => deletePromise(objectStore, key));\n  }\n\n  async save(item) {\n    return this._tx('readwrite', objectStore => putPromise(objectStore, item));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/middl/Desktop/DevIT project/devit-project/src/db/connection.js"],"names":["DB_NAME","OBJECT_STORE_NAME","IndexedDbRepository","constructor","keyPath","error","openDatabasePromise","_openDatabase","dbConnection","_tx","txMode","callback","transaction","objectStore","findAll","getAllPromise","findById","key","getPromise","deleteById","deletePromise","save","item","putPromise"],"mappings":"AAAA,MAAMA,OAAO,GAAG,gBAAhB;AACA,MAAMC,iBAAiB,GAAG,aAA1B;AACA;;AACA,eAAe,MAAMC,mBAAN,CAA0B;AACvC;AACAC,EAAAA,WAAW,CAAEC,OAAF,EAAY;AACrB,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKD,OAAL,GAAeA,OAAf,CAFqB,CAIrB;AACA;;AACA,SAAKE,mBAAL,GAA2B,KAAKC,aAAL,EAA3B;AACD;;AAED,QAAMA,aAAN,CAAqBH,OAArB,EAA+B;AAC7B,QAAI;AACF,WAAKI,YAAL,GAAoB,MAAMF,mBAAmB,CAAEF,OAAF,CAA7C;AACD,KAFD,CAEE,OAAQC,KAAR,EAAgB;AAChB,WAAKA,KAAL,GAAaA,KAAb;AACA,YAAMA,KAAN;AACD;AACF;;AAED,QAAMI,GAAN,CAAWC,MAAX,EAAmBC,QAAnB,EAA8B;AAC5B,UAAM,KAAKL,mBAAX,CAD4B,CACI;;AAChC,UAAMM,WAAW,GAAG,KAAKJ,YAAL,CAAkBI,WAAlB,CAA+B,CAAEX,iBAAF,CAA/B,EAAsDS,MAAtD,CAApB;AACA,UAAMG,WAAW,GAAGD,WAAW,CAACC,WAAZ,CAAyBZ,iBAAzB,CAApB;AACA,WAAO,MAAMU,QAAQ,CAAEE,WAAF,CAArB;AACD;;AAED,QAAMC,OAAN,GAAgB;AACd,WAAO,KAAKL,GAAL,CAAU,UAAV,EAAsBI,WAAW,IAAIE,aAAa,CAAEF,WAAF,CAAlD,CAAP;AACD;;AAED,QAAMG,QAAN,CAAgBC,GAAhB,EAAsB;AACpB,WAAO,KAAKR,GAAL,CAAU,UAAV,EAAsBI,WAAW,IAAIK,UAAU,CAAEL,WAAF,EAAeI,GAAf,CAA/C,CAAP;AACD;;AAED,QAAME,UAAN,CAAkBF,GAAlB,EAAwB;AACtB,WAAO,KAAKR,GAAL,CAAU,WAAV,EAAuBI,WAAW,IAAIO,aAAa,CAAEP,WAAF,EAAeI,GAAf,CAAnD,CAAP;AACD;;AAED,QAAMI,IAAN,CAAYC,IAAZ,EAAmB;AACjB,WAAO,KAAKb,GAAL,CAAU,WAAV,EAAuBI,WAAW,IAAIU,UAAU,CAAEV,WAAF,EAAeS,IAAf,CAAhD,CAAP;AACD;;AAzCsC","sourcesContent":["const DB_NAME = 'PictureStoring';\r\nconst OBJECT_STORE_NAME = 'objectStore';\r\n/* ... */\r\nexport default class IndexedDbRepository {\r\n  /* ... */\r\n  constructor( keyPath ) {\r\n    this.error = null;\r\n    this.keyPath = keyPath;\r\n\r\n    // конструктор нельзя объявить как async\r\n    // поэтому вынесено в отдельную функцию\r\n    this.openDatabasePromise = this._openDatabase();\r\n  }\r\n\r\n  async _openDatabase( keyPath ) {\r\n    try {\r\n      this.dbConnection = await openDatabasePromise( keyPath );\r\n    } catch ( error ) {\r\n      this.error = error;\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async _tx( txMode, callback ) {\r\n    await this.openDatabasePromise; // await db connection\r\n    const transaction = this.dbConnection.transaction( [ OBJECT_STORE_NAME ], txMode );\r\n    const objectStore = transaction.objectStore( OBJECT_STORE_NAME );\r\n    return await callback( objectStore );\r\n  }\r\n\r\n  async findAll() {\r\n    return this._tx( 'readonly', objectStore => getAllPromise( objectStore ) );\r\n  }\r\n\r\n  async findById( key ) {\r\n    return this._tx( 'readonly', objectStore => getPromise( objectStore, key ) );\r\n  }\r\n\r\n  async deleteById( key ) {\r\n    return this._tx( 'readwrite', objectStore => deletePromise( objectStore, key ) );\r\n  }\r\n\r\n  async save( item ) {\r\n    return this._tx( 'readwrite', objectStore => putPromise( objectStore, item ) );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}