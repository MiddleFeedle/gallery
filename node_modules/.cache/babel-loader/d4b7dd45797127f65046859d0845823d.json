{"ast":null,"code":"const DB_NAME = 'Storage';\nconst OBJECT_STORE_NAME = 'Pictures';\n\nfunction openDatabasePromise(keyPath) {\n  return new Promise((resolve, reject) => {\n    const dbOpenRequest = window.indexedDB.open(DB_NAME, 1);\n\n    dbOpenRequest.onblocked = () => {\n      reject(\"Что-то пошло не так.\");\n    };\n\n    dbOpenRequest.onerror = err => {\n      console.log('Unable to open indexedDB ' + DB_NAME);\n      console.log(err);\n      reject('Невозможно открыть базу данных.');\n    };\n\n    dbOpenRequest.onupgradeneeded = event => {\n      const db = event.target.result;\n      var objectStore = db.createObjectStore('Pictures', {\n        keyPath: 'id',\n        autoIncrement: true\n      });\n      objectStore.createIndex(\"name\", \"name\", {\n        unique: false\n      });\n      objectStore.createIndex(\"format\", \"format\", {\n        unique: false\n      });\n      objectStore.createIndex(\"height\", \"height\", {\n        unique: false\n      });\n      objectStore.createIndex(\"size\", \"size\", {\n        unique: false\n      });\n      objectStore.createIndex(\"type\", \"type\", {\n        unique: false\n      });\n      objectStore.createIndex(\"date\", \"date\", {\n        unique: false\n      });\n      objectStore.createIndex(\"desc\", \"desc\", {\n        unique: false\n      });\n      objectStore.createIndex(\"tags\", \"tags\", {\n        unique: false,\n        multiEntry: true\n      });\n      objectStore.createIndex(\"value\", \"value\", {\n        unique: false\n      });\n      objectStore.createIndex(\"collection\", \"collection\", {\n        unique: false\n      });\n    };\n\n    dbOpenRequest.onsuccess = () => {\n      console.info('Successfully open indexedDB connection to ' + DB_NAME);\n      resolve(dbOpenRequest.result);\n    };\n\n    dbOpenRequest.onerror = reject;\n  });\n} // Оборачиваем функции от ObjectStore, поддерживающие интерфейс IDBRequest\n// в вызов с использованием Promise\n\n\nfunction wrap(methodName) {\n  return function () {\n    const [objectStore, ...etc] = arguments;\n    return new Promise((resolve, reject) => {\n      const request = objectStore[methodName](...etc);\n\n      request.onsuccess = () => resolve(request.result);\n\n      request.onerror = reject;\n    });\n  };\n}\n\nfunction wrapByID(methodName) {\n  return function () {\n    const [objectStore, index, ...etc] = arguments;\n    return new Promise((resolve, reject) => {\n      console.log(index);\n      console.log([methodName]);\n      console.log(...etc);\n      var myIndex = objectStore.index(index);\n      console.log(myIndex);\n      const request = myIndex[methodName](...etc);\n      console.log(request);\n\n      request.onsuccess = () => resolve(request.result);\n\n      request.onerror = reject;\n    });\n  };\n}\n\nfunction wrapEdit(methodName) {\n  return function () {\n    const [objectStore, record, ...etc] = arguments;\n    return new Promise((resolve, reject) => {\n      alert(...etc);\n      const request = objectStore.put(...etc, record);\n\n      request.onsuccess = () => resolve(request.result);\n\n      request.onerror = reject;\n    });\n  };\n}\n\nconst getByIDPromise = wrapByID('getAll');\nconst deletePromise = wrap('delete');\nconst getAllPromise = wrap('getAll');\nconst getPromise = wrap('get');\nconst putPromise = wrap('put');\nconst putEditPromise = wrapEdit('put');\nexport default class IndexedDbRepository {\n  constructor(keyPath) {\n    this.error = null;\n    this.keyPath = keyPath; // конструктор нельзя объявить как async\n    // поэтому вынесено в отдельную функцию\n\n    this.openDatabasePromise = this._openDatabase(keyPath);\n  }\n\n  async _openDatabase(keyPath) {\n    try {\n      this.dbConnection = await openDatabasePromise(keyPath);\n    } catch (error) {\n      this.error = error;\n      throw error;\n    }\n  }\n\n  async _tx(txMode, callback) {\n    await this.openDatabasePromise; // await db connection\n\n    const transaction = this.dbConnection.transaction([OBJECT_STORE_NAME], txMode);\n    const objectStore = transaction.objectStore(OBJECT_STORE_NAME);\n    return await callback(objectStore);\n  }\n\n  async save(item) {\n    return this._tx('readwrite', objectStore => putPromise(objectStore, item));\n  }\n\n  async edit(item, key) {\n    return this._tx('readwrite', objectStore => putEditPromise(objectStore, item, key));\n  }\n\n  async findById(key) {\n    return this._tx('readonly', objectStore => getPromise(objectStore, key));\n  }\n\n  async findByIndex(index, key) {\n    return this._tx('readonly', objectStore => getByIDPromise(objectStore, index, key));\n  }\n\n  async deleteById(key) {\n    return this._tx('readwrite', objectStore => deletePromise(objectStore, key));\n  }\n\n  async findAll() {\n    return this._tx('readonly', objectStore => getAllPromise(objectStore));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/middl/Desktop/DevIT project/devit-project/src/db/connection.js"],"names":["DB_NAME","OBJECT_STORE_NAME","openDatabasePromise","keyPath","Promise","resolve","reject","dbOpenRequest","window","indexedDB","open","onblocked","onerror","err","console","log","onupgradeneeded","event","db","target","result","objectStore","createObjectStore","autoIncrement","createIndex","unique","multiEntry","onsuccess","info","wrap","methodName","etc","arguments","request","wrapByID","index","myIndex","wrapEdit","record","alert","put","getByIDPromise","deletePromise","getAllPromise","getPromise","putPromise","putEditPromise","IndexedDbRepository","constructor","error","_openDatabase","dbConnection","_tx","txMode","callback","transaction","save","item","edit","key","findById","findByIndex","deleteById","findAll"],"mappings":"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","sourcesContent":["\r\nconst DB_NAME = 'Storage';\r\nconst OBJECT_STORE_NAME = 'Pictures';\r\n\r\n\r\nfunction openDatabasePromise( keyPath : string ) : Promise< IDBDatabase > {\r\n  return new Promise(( resolve, reject ) => {\r\n    const dbOpenRequest = window.indexedDB.open( DB_NAME, 1 );\r\n\r\n    dbOpenRequest.onblocked = () => {\r\n      reject(\"Что-то пошло не так.\");\r\n    };\r\n\r\n    dbOpenRequest.onerror = err => {\r\n      console.log( 'Unable to open indexedDB ' + DB_NAME );\r\n      console.log( err );\r\n      reject( 'Невозможно открыть базу данных.');\r\n    };\r\n\r\n    dbOpenRequest.onupgradeneeded = event => {\r\n      const db = event.target.result;\r\n\r\n      var objectStore = db.createObjectStore('Pictures', {keyPath:'id', autoIncrement: true});\r\n\r\n            objectStore.createIndex(\"name\", \"name\", { unique: false });\r\n\r\n            objectStore.createIndex(\"format\", \"format\", { unique: false });\r\n            objectStore.createIndex(\"height\", \"height\", { unique: false });\r\n            objectStore.createIndex(\"size\", \"size\", { unique: false });\r\n            objectStore.createIndex(\"type\", \"type\", { unique: false });\r\n            objectStore.createIndex(\"date\", \"date\", { unique: false });\r\n            objectStore.createIndex(\"desc\", \"desc\", { unique: false });\r\n            objectStore.createIndex(\"tags\", \"tags\", { unique: false, multiEntry:true});\r\n            objectStore.createIndex(\"value\", \"value\", { unique: false });\r\n            objectStore.createIndex(\"collection\", \"collection\", { unique: false });\r\n\r\n\r\n    };\r\n\r\n\r\n    dbOpenRequest.onsuccess = () => {\r\n\r\n\r\n\r\n      console.info( 'Successfully open indexedDB connection to ' + DB_NAME );\r\n      resolve( dbOpenRequest.result );\r\n    };\r\n\r\n    dbOpenRequest.onerror = reject;\r\n  } );\r\n}\r\n\r\n// Оборачиваем функции от ObjectStore, поддерживающие интерфейс IDBRequest\r\n// в вызов с использованием Promise\r\n\r\nfunction wrap( methodName ) {\r\n  return function() {\r\n    const [ objectStore, ...etc ] = arguments;\r\n    return new Promise( ( resolve, reject ) => {\r\n\r\n\r\n      const request = objectStore[ methodName ]( ...etc );\r\n\r\n      request.onsuccess = () => resolve( request.result );\r\n      request.onerror = reject;\r\n    } );\r\n  };\r\n}\r\n\r\nfunction wrapByID( methodName ) {\r\n  return function() {\r\n    const [ objectStore, index, ...etc ] = arguments;\r\n    return new Promise( ( resolve, reject ) => {\r\n\r\n      console.log(index);\r\n      console.log([ methodName ]);\r\n      console.log(...etc);\r\n\r\n      var myIndex = objectStore.index(index);\r\n      console.log(myIndex);\r\n      const request =  myIndex[ methodName ]( ...etc );\r\n      console.log(request);\r\n      request.onsuccess = () => resolve( request.result );\r\n      request.onerror = reject;\r\n    } );\r\n  };\r\n}\r\n\r\n\r\n\r\nfunction wrapEdit( methodName ) {\r\n  return function() {\r\n    const [ objectStore, record, ...etc ] = arguments;\r\n    return new Promise( ( resolve, reject ) => {\r\n\r\n      alert(...etc);\r\n      const request = objectStore.put(...etc, record);\r\n\r\n      request.onsuccess = () => resolve( request.result );\r\n      request.onerror = reject;\r\n    } );\r\n  };\r\n}\r\n\r\nconst getByIDPromise = wrapByID( 'getAll' );\r\n\r\nconst deletePromise = wrap( 'delete' );\r\nconst getAllPromise = wrap( 'getAll' );\r\nconst getPromise = wrap( 'get' );\r\nconst putPromise = wrap( 'put' );\r\nconst putEditPromise = wrapEdit( 'put' );\r\n\r\nexport default class IndexedDbRepository {\r\n\r\n  dbConnection : ?IDBDatabase;\r\n  error : ?any;\r\n  openDatabasePromise : Promise< IDBDatabase >;\r\n\r\n  constructor( keyPath : string ) {\r\n    this.error = null;\r\n    this.keyPath = keyPath;\r\n    // конструктор нельзя объявить как async\r\n    // поэтому вынесено в отдельную функцию\r\n    this.openDatabasePromise = this._openDatabase( keyPath );\r\n  }\r\n\r\n  async _openDatabase( keyPath : string ) {\r\n    try {\r\n      this.dbConnection = await openDatabasePromise( keyPath );\r\n    } catch ( error ) {\r\n      this.error = error;\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async _tx( txMode : string, callback ) {\r\n  await this.openDatabasePromise; // await db connection\r\n  const transaction  = this.dbConnection.transaction( [ OBJECT_STORE_NAME ], txMode );\r\n  const objectStore  = transaction.objectStore( OBJECT_STORE_NAME );\r\n  return await callback( objectStore );\r\n}\r\n\r\n\r\nasync save( item : any ) : Promise< any > {\r\n  return this._tx( 'readwrite', objectStore => putPromise( objectStore, item ) );\r\n}\r\n\r\nasync edit( item, key ) : Promise< any > {\r\n  return this._tx( 'readwrite', objectStore => putEditPromise( objectStore, item, key) );\r\n}\r\n\r\n\r\nasync findById( key ) : Promise< any > {\r\n    return this._tx( 'readonly', objectStore => getPromise( objectStore, key ) );\r\n  }\r\n\r\n  async findByIndex( index, key ) : Promise< any >\r\n    {\r\n      return this._tx( 'readonly', objectStore => getByIDPromise( objectStore, index, key ) );\r\n    }\r\n\r\n\r\n  async deleteById( key ) : Promise< any > {\r\n    return this._tx( 'readwrite', objectStore => deletePromise( objectStore, key ) );\r\n  }\r\n\r\nasync findAll() : Promise< any[] > {\r\n   return this._tx( 'readonly', objectStore => getAllPromise( objectStore ) );\r\n }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}